[gd_resource type="ShaderMaterial" load_steps=13 format=2]

[sub_resource type="VisualShaderNodeScalarOp" id=1]
default_input_values = [ 0, 0.0, 1, 2.0 ]
operator = 4

[sub_resource type="VisualShaderNodeScalarOp" id=2]
output_port_for_preview = 0
operator = 2

[sub_resource type="VisualShaderNodeScalarInterp" id=3]
output_port_for_preview = 0
default_input_values = [ 0, 0.1, 1, 0.2, 2, 0.5 ]

[sub_resource type="VisualShaderNodeInput" id=4]
input_name = "vertex"

[sub_resource type="VisualShaderNodeVectorDecompose" id=5]

[sub_resource type="VisualShaderNodeScalarOp" id=6]
default_input_values = [ 0, 0.0, 1, 2.0 ]
operator = 4

[sub_resource type="VisualShaderNodeScalarFunc" id=7]
function = 14

[sub_resource type="VisualShaderNodeScalarFunc" id=8]
function = 16

[sub_resource type="VisualShaderNodeInput" id=9]
input_name = "camera"

[sub_resource type="VisualShaderNodeTransformVecMult" id=10]

[sub_resource type="VisualShaderNodeScalarOp" id=11]
output_port_for_preview = 0
operator = 1

[sub_resource type="VisualShader" id=12]
code = "shader_type spatial;



void vertex() {
// Output:0

}

void fragment() {
// Input:7
	mat4 n_out7p0 = CAMERA_MATRIX;

// Input:2
	vec3 n_out2p0 = VERTEX;

// TransformVectorMult:8
	vec3 n_out8p0 = (n_out7p0 * vec4(n_out2p0, 1.0)).xyz;

// VectorDecompose:3
	float n_out3p0 = n_out8p0.x;
	float n_out3p1 = n_out8p0.y;
	float n_out3p2 = n_out8p0.z;

// ScalarFunc:5
	float n_out5p0 = floor(n_out3p0);

// ScalarOp:4
	float n_in4p1 = 2.00000;
	float n_out4p0 = mod(n_out5p0, n_in4p1);

// ScalarFunc:6
	float n_out6p0 = ceil(n_out3p2);

// ScalarOp:10
	float n_in10p1 = 2.00000;
	float n_out10p0 = mod(n_out6p0, n_in10p1);

// ScalarOp:9
	float n_out9p0 = n_out4p0 - n_out10p0;

// ScalarOp:11
	float n_out11p0 = n_out9p0 * n_out9p0;

// ScalarMix:12
	float n_in12p0 = 0.10000;
	float n_in12p1 = 0.20000;
	float n_out12p0 = mix(n_in12p0, n_in12p1, n_out11p0);

// Output:0
	ALBEDO = vec3(n_out12p0);

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -782, 4 )
nodes/fragment/0/position = Vector2( 1140, 220 )
nodes/fragment/2/node = SubResource( 4 )
nodes/fragment/2/position = Vector2( -700, 280 )
nodes/fragment/3/node = SubResource( 5 )
nodes/fragment/3/position = Vector2( -200, 200 )
nodes/fragment/4/node = SubResource( 6 )
nodes/fragment/4/position = Vector2( 260, 200 )
nodes/fragment/5/node = SubResource( 7 )
nodes/fragment/5/position = Vector2( 40, 220 )
nodes/fragment/6/node = SubResource( 8 )
nodes/fragment/6/position = Vector2( 40, 360 )
nodes/fragment/7/node = SubResource( 9 )
nodes/fragment/7/position = Vector2( -700, 200 )
nodes/fragment/8/node = SubResource( 10 )
nodes/fragment/8/position = Vector2( -440, 160 )
nodes/fragment/9/node = SubResource( 11 )
nodes/fragment/9/position = Vector2( 460, 220 )
nodes/fragment/10/node = SubResource( 1 )
nodes/fragment/10/position = Vector2( 260, 340 )
nodes/fragment/11/node = SubResource( 2 )
nodes/fragment/11/position = Vector2( 700, 280 )
nodes/fragment/12/node = SubResource( 3 )
nodes/fragment/12/position = Vector2( 900, 220 )
nodes/fragment/connections = PoolIntArray( 3, 0, 5, 0, 5, 0, 4, 0, 2, 0, 8, 1, 7, 0, 8, 0, 6, 0, 10, 0, 3, 2, 6, 0, 4, 0, 9, 0, 10, 0, 9, 1, 9, 0, 11, 0, 9, 0, 11, 1, 12, 0, 0, 0, 11, 0, 12, 2, 8, 0, 3, 0 )

[resource]
shader = SubResource( 12 )
